import Head from 'next/head'
import Image from 'next/image'
// import Link from 'next/link'
import styles from '../../styles/Home.module.css'

import { Button, Link } from '@nextui-org/react';
import PageHeader from '../components/header';

import spotifyApi from '../library/spotify';

export default function Genre({ genre, tracks }) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Music App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageHeader />
      <Link href='/'>
        <Button size="sm" color="gradient">Home</Button>
      </Link>

      <main>
        <h1>Genre: {genre} </h1>
      </main>
      <aside>
        <h2>Recommended Tracks</h2>
        <ul>
          {/* {console.log(tracks)} */}
          {tracks.map(track => <li key={track.id}>{track.artists[0].name} - {track.name}:<a href={track.external_urls.spotify}>Link</a></li>)}
        </ul>
      </aside>
    </div>
  )
}

let genreSeeds = [];

// reference: https://nextjs.org/docs/basic-features/data-fetching/get-static-paths 
export async function getStaticPaths() {
  // const data = await fetch("https://api.spotify.com/v1/recommendations/available-genre-seeds",
  // {  
  //   headers: {
  //   Authorization: `Bearer ${process.env.NEXT_PUBLIC_SPOTIFY_OAUTH_TOKEN}`
  //   }
  // }).then(response => response.json());

  // const genrePaths = data.genres.map( genre => { return { params: { genre } } } );

  await spotifyApi.clientCredentialsGrant()
    .then(function (data) {
      spotifyApi.setAccessToken(data.body['access_token']);
      return spotifyApi.getAvailableGenreSeeds()
    })
    .then(function (data) {
      genreSeeds = data.body.genres;
      console.log(genreSeeds);
    }, function (err) {
      console.log('Something went wrong!', err);
    });


  const genrePaths = genreSeeds.map(genre => { return { params: { genre } } });

  return {
    paths: genrePaths,
    fallback: false // false or 'blocking'
  }
}

let recommendations = [];

export async function getStaticProps({ params }) {

  // console.log(params)

  // const data = await fetch(`https://api.spotify.com/v1/recommendations?seed_genres=${params.genre}`,
  // {  
  //   headers: {
  //   Authorization: `Bearer ${process.env.NEXT_PUBLIC_SPOTIFY_OAUTH_TOKEN}`
  //   }
  // }).then(response => response.json());
  // console.log(params.genre);


  await spotifyApi.clientCredentialsGrant()
    .then(function (data) {
      spotifyApi.setAccessToken(data.body['access_token']);
      return spotifyApi.getRecommendations({
        seed_genres: params.genre
      })
    })
    .then(function (data) {
      recommendations = data.body.tracks;
      console.log(recommendations);
    }, function (err) {
      console.log('Something went wrong!', err);
    });

  return {
    props: {
      genre: params.genre,
      tracks: recommendations
    }
  }
}